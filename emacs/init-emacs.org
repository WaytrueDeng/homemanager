* PackageManagement
#+begin_src emacs-lisp
  (setq package-archives '(("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                           ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                           ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
  (package-initialize)
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "~/.emacs.d/lisp/use-package")
  (require 'use-package)

  ;;straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; prevent package.el loading packages prior to their init-file loading.
  (setq package-enable-at-startup nil)


  ;; install use-package via straight
  (straight-use-package 'use-package)
#+end_src

* Basic
#+begin_src emacs-lisp
  ;; Autoload
  (global-auto-revert-mode t)

  ;; 关闭工具栏，tool-bar-mode 即为一个 Minor Mode
  (tool-bar-mode -1)

  ;; Disable Menubar
  (menu-bar-mode -1)

  ;; 自动重新加载硬盘上已经发生变动的文件
  (global-auto-revert-mode 1)
  ;; 关闭文件滑动控件
  (scroll-bar-mode -1)

  ;; 显示行号
  ;;(global-linum-mode 1)

  ;; 更改光标的样式（不能生效，解决方案见第二集）
  (setq cursor-type 'bar)

  ;; 关闭启动帮助画面
  (setq inhibit-splash-screen 1)

  ;; stop creating backup~ files
  (setq make-backup-files nil)

  ;; ; stop creating #autosave# files
  (setq auto-save-default nil)

  ;; enable source git controlled file
  (setq vc-follow-symlinks t)

  (use-package undo-tree
    :straight t
    :config
    (global-undo-tree-mode 1)
    ;; Prevent undo tree files from polluting your git repo
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))

    )

  (use-package s
    :straight t
    )
  ;; exit insert mode auto save buffer
  ;;(add-hook 'evil-insert-state-exit-hook #'save-buffer)
#+end_src

* 交互
#+begin_src emacs-lisp
  (use-package evil
    :straight t 
    :init 
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    )

  (use-package evil-collection
    :straight t 
    :after evil
    :config 
    (evil-collection-init)
    )

  ;; Enable vertico
  (use-package vertico
    :straight t 
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    )

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :straight t 
    :bind (
           ;("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  ;; 
  (use-package corfu
    :straight t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match t)      ;; Never quit, even if there is no match
    (corfu-preview-current t)    ;; Disable current candidate preview
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 6)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (setq corfu-auto t
        corfu-quit-no-match 'separator)
    (global-corfu-mode)
    )

    ;;(use-package corfu-popupinfo
    ;;:config
    ;;(corfu-popupinfo-mode))


  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :straight t
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'tempel-complete)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )



  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
  ; snippets
  ;;(use-package yasnippet
  ;;  :straight t
  ;;  :config
  ;;  (yas-global-mode 1))

  ;;(use-package yasnippet-snippets
  ;;  :straight t)
  (use-package tempel
    :straight t
    :init
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)
    )

  (use-package tempel-collection
    :straight t)
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :straight t
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("C-c s" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )

  (use-package smartparens
    :straight t
    :config
    (smartparens-global-mode 1))
#+end_src

* UI
#+begin_src emacs-lisp
  ;; enable doom themes support
  (use-package doom-themes
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-solarized-dark-high-contrast t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; dracula theme
  (use-package dracula-theme
    :straight t
    :init
    (setq dracula-enlarge-headings nil)
    :config
    (load-theme 'dracula t)
    )
  ;; show git sine on the left of the pane
  (use-package git-gutter
    :straight t
    :init
    (global-git-gutter-mode +1))

  ;; enable the text scale default which change only the text in the buffer rather than with the mode line together
  (use-package default-text-scale
    :straight t
   )
  (add-hook 'buffer-list-update-hook (lambda () (text-scale-set 1)))
#+end_src

* org and roam
#+begin_src emacs-lisp
  ;; enale indention by default
  (use-package org
    :straight (:type built-in)
    :config
    (setq org-startup-indented t ;;enable indention as default
          ;;enable the yasnippet working as intended
          org-src-tab-acts-natively nil 
          ;; enable org id link as default
          org-id-link-to-org-use-id t
          ;; enable start up fold
          org-startup-folded 'overview
          org-export-headline-levels 6
          )
    :bind
    (:map org-src-mode-map
          ("C-c C-c" . org-edit-src-exit))
    )
  (defun my/org-roam-export-all ()
    "Re-exports all Org-roam files to Hugo markdown."
    (interactive)
    (dolist (f (org-roam-list-files))
      (with-current-buffer (find-file f)
        (when (s-contains? "publish: true" (buffer-string))
          (org-hugo-export-wim-to-md)))))

  ;; org-super links
  (use-package org-super-links
    :straight (org-super-links :type git :host github :repo "toshism/org-super-links" :branch "develop")
    :bind (("C-c l l" . org-super-links-link)
           ("C-c l s" . org-super-links-store-link)
           ("C-c l d" . org-super-links-delete-link)
           ("C-c l i" . org-super-links-insert-link))
    :config
    (setq org-super-links-backlink-into-drawer nil
          org-super-links-link-prefix "- 🔗To -> "
          org-super-links-backlink-prefix "- 🔗By <- "
          )
    )
  ;; beautifi stars
  (use-package org-superstar
    :straight t
    :after org
    ;;:hook
    ;;(org-mode . org-superstar-mode)
    :config
    (setq org-superstar-item-bullet-alist '((?- . ?⁍)))
    (setq org-superstar-headline-bullets-list
    '("➊" "➋" "➌" "➍" "➎" "➏" "➐" "➑" "➒" "➓"))
    )
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

  ;; org download
  ;;(use-package org-download
  ;;  :straight t
  ;;  :after org-roam
  ;;  :hook
  ;;  (text-mode . org-download-mode)
  ;;  :config
  ;;  (setq org-download-method 'directory)
  ;;  (setq org-download-image-dir (concat org-roam-directory "/assets"))
  ;;  (setq org-download-heading-lvl nil)
  ;;  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  ;;  )

  (defun my/org-capture-shortcut ()
    "this is my org-capture short cut"
    (interactive)
    (org-capture nil "r")
    )

  ;; org-roam
  (use-package org-roam
    :straight t
    :custom
    (org-roam-directory (file-truename "~/Documents/roam/"))
    :init
    (setq org-roam-directory (file-truename "~/Documents/roam"))
    (setq org-roam-file-exclude-regexp
      ;;(concat "^" (expand-file-name org-roam-directory) "/logseq/*")
      "logseq/"
      )

    :bind (("C-c n l" . org-roam-buffer-toggle)
    ("C-c n f" . org-roam-node-find)
    ("C-c n g" . org-roam-graph)
    ("C-c n i" . org-roam-node-insert)
    ("C-c n c" . org-roam-capture)
    ;; Dailies
    ("C-c n j" . org-roam-dailies-capture-today)
    ("C-M-<return>" . org-insert-subheading)
    ("C-c r" . my/org-capture-shortcut)
    )

    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
  (setq org-roam-capture-templates
          '(
           ("d" "default" plain "" :target
            (file+head "./pages/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n#+publish: true\n")
            :unnarrowed t
           ;; :immediate-finish t
            :kill-buffer t
            :jump-to-captured -1)
          ;; ("e" "default" plain "" :target
          ;;  (file+head "./English/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n")
          ;;  :unnarrowed t
          ;; ;; :immediate-finish t
          ;;  :kill-buffer t
          ;;  :jump-to-captured -1)
          ;; ("z" "default" plain "" :target
          ;;  (file+head "./政治/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n")
          ;;  :unnarrowed t
          ;; ;; :immediate-finish t
          ;;  :kill-buffer t
          ;;  :jump-to-captured -1)
          ;; ("c" "cards" plain "" :target (file+head "./pages/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n\n\n* Keywords\n- \n* Contents\n* Mnemonic\n* Reference")
          ;;  :unnarrowed t
          ;;  ;;:immediate-finish t
          ;;  :kill-buffer
          ;;  :jump-to-captured -1)
           )

          org-capture-templates
          `(
           ("d" "default" plain "" :target
            (file+head "./pages/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n"))
           ("r" "Journal Entry" entry
   (file+datetree ,(concat org-roam-directory "/pages/gkd.org"))
   "*** TODO [#%^{priority|B}] %a"
   :immediate-finish t
   )
           ("t" "thing to be done" entry
   (file+datetree ,(concat org-roam-directory "/pages/plan_org.org"))
   "*** TODO [#%^{priority|B}]  %^{What Todo}")
          ;; ("e" "default" plain "" :target
          ;;  (file+head "./English/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n")
          ;;  :unnarrowed t
          ;; ;; :immediate-finish t
          ;;  :kill-buffer t
          ;;  :jump-to-captured -1)
          ;; ("z" "default" plain "" :target
          ;;  (file+head "./政治/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n")
          ;;  :unnarrowed t
          ;; ;; :immediate-finish t
          ;;  :kill-buffer t
          ;;  :jump-to-captured -1)
          ;; ("c" "cards" plain "" :target (file+head "./pages/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n\n\n* Keywords\n- \n* Contents\n* Mnemonic\n* Reference")
          ;;  :unnarrowed t
          ;;  ;;:immediate-finish t
          ;;  :kill-buffer
          ;;  :jump-to-captured -1)
           )

          )

          org-capture-templates
          `(
           ("d" "default" plain "" :target
            (file+head "./pages/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n"))
           ("r" "Journal Entry" entry
   (file+datetree ,(concat org-roam-directory "/pages/gkd.org"))
   "*** TODO [#%^{priority|B}] %a")
           ("t" "thing to be done" entry
   (file+datetree ,(concat org-roam-directory "/pages/plan_org.org"))
   "*** TODO [#%^{priority|B}]  %^{What Todo}")
          ;; ("e" "default" plain "" :target
          ;;  (file+head "./English/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n")
          ;;  :unnarrowed t
          ;; ;; :immediate-finish t
          ;;  :kill-buffer t
          ;;  :jump-to-captured -1)
          ;; ("z" "default" plain "" :target
          ;;  (file+head "./政治/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n")
          ;;  :unnarrowed t
          ;; ;; :immediate-finish t
          ;;  :kill-buffer t
          ;;  :jump-to-captured -1)
          ;; ("c" "cards" plain "" :target (file+head "./pages/${slug}.org" "#+title: ${title} \n#+creationTime: %U \n\n\n* Keywords\n- \n* Contents\n* Mnemonic\n* Reference")
          ;;  :unnarrowed t
          ;;  ;;:immediate-finish t
          ;;  :kill-buffer
          ;;  :jump-to-captured -1)
           )

    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol)
    )

  ;; org-roam-ui
  (use-package org-roam-ui
    :straight
      (:host github :repo "o8vm/org-roam-ui" :branch "main" :files ("*" "*/"))
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))

  (use-package ox-hugo
    :straight t   ;Auto-install the package from Melpa
    :after ox
    :config
    (setq org-hugo-base-dir "~/Documents/hugo"))
#+end_src

* LSP
#+BEGIN_SRC emacs-lisp
;;(use-package eglot
;;  :straight t
;;  )

#+END_SRC
